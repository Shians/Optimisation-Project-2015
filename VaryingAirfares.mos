model ModelName
uses "mmxprs";

declarations
    numCities = 15
    numDays = 15

    CITIES = 1..numCities
    DAYS = 1..numDays
	WEEKDAYS = 1..7

    location : array(CITIES, DAYS) of mpvar
    city : array(CITIES) of mpvar
    move : array(CITIES, CITIES, DAYS) of mpvar

    names: array(CITIES) of string  
    dayNames: array(WEEKDAYS) of string
    
    travel : array(CITIES, CITIES) of integer
    fromMelb : array(CITIES) of integer
    toMelb : array(CITIES,WEEKDAYS) of integer
    
    augment: array(CITIES, CITIES, WEEKDAYS) of integer
	augmentTemp1: array(CITIES, WEEKDAYS) of integer
	augmentTemp2: array(CITIES, WEEKDAYS) of integer
	augmentTemp3: array(CITIES, WEEKDAYS) of integer
	augmentTemp4: array(CITIES, WEEKDAYS) of integer
	augmentTemp5: array(CITIES, WEEKDAYS) of integer
	augmentTemp6: array(CITIES, WEEKDAYS) of integer
	augmentTemp7: array(CITIES, WEEKDAYS) of integer
	augmentTemp8: array(CITIES, WEEKDAYS) of integer
	augmentTemp9: array(CITIES, WEEKDAYS) of integer
	augmentTemp10: array(CITIES, WEEKDAYS) of integer
	augmentTemp11: array(CITIES, WEEKDAYS) of integer
	augmentTemp12: array(CITIES, WEEKDAYS) of integer
	augmentTemp13: array(CITIES, WEEKDAYS) of integer
	augmentTemp14: array(CITIES, WEEKDAYS) of integer
	augmentTemp15: array(CITIES, WEEKDAYS) of integer
    
    dailyLow : array(CITIES) of integer
    dailyMid : array(CITIES) of integer
    dailyHigh : array(CITIES) of integer

    minDays : integer
    maxDays : integer

    totalCost : linctr
end-declarations

initialisations from "BaseData15.txt"
	names as "names"
	dayNames as "dayNames"
 	travel as "travel"
 	fromMelb as "fromMelb"
 	dailyLow as "dailyLow"
 	dailyMid as "dailyMid"
 	dailyHigh as "dailyHigh"
end-initialisations

initialisations from "AirfareAugmentationData15.txt"
 	toMelb as "toMelb"
 	augmentTemp1 as "Moscow"
 	augmentTemp2 as "Paris"
 	augmentTemp3 as "London"
 	augmentTemp4 as "Madrid"
 	augmentTemp5 as "Rome"
 	augmentTemp6 as "Crete"
 	augmentTemp7 as "Barcelona"
 	augmentTemp8 as "Berlin"
 	augmentTemp9 as "Budapest"
 	augmentTemp10 as "Florence"
 	augmentTemp11 as "Amsterdam"
 	augmentTemp12 as "Prague"
 	augmentTemp13 as "Istanbul"
 	augmentTemp14 as "Vienna"
 	augmentTemp15 as "Venice"
end-initialisations

forall(j in CITIES) do
	forall (d in WEEKDAYS) do
		augment(1, j, d) := augmentTemp1(j, d)
		augment(2, j, d) := augmentTemp2(j, d)
		augment(3, j, d) := augmentTemp3(j, d)
		augment(4, j, d) := augmentTemp4(j, d)
		augment(5, j, d) := augmentTemp5(j, d)
		augment(6, j, d) := augmentTemp6(j, d)
		augment(7, j, d) := augmentTemp7(j, d)
		augment(8, j, d) := augmentTemp8(j, d)
		augment(9, j, d) := augmentTemp9(j, d)
		augment(10, j, d) := augmentTemp10(j, d)
		augment(11, j, d) := augmentTemp11(j, d)
		augment(12, j, d) := augmentTemp12(j, d)
		augment(13, j, d) := augmentTemp13(j, d)
		augment(14, j, d) := augmentTemp14(j, d)
		augment(15, j, d) := augmentTemp15(j, d)
	end-do
end-do

minDays := 2
maxDays := 4

forall(c in CITIES) do
    sum (d in DAYS) location(c, d) >= minDays * city(c)
    sum (d in DAYS) location(c, d) <= maxDays * city(c)
end-do

forall(d in 1..(numDays-1), f in CITIES, t in CITIES) do
    location(f, d) + location(t, d+1) <= 1 + move(f, t, d)
end-do

forall(d in DAYS) do
    sum (c in CITIES) location(c, d) = 1
    sum (f in CITIES, t in CITIES) move(f, t, d) = 1
end-do

forall(c in CITIES, d in DAYS) do
    city(c) is_binary
    location(c, d) is_binary
end-do

forall(f in CITIES, t in CITIES, d in DAYS) do
    move(f, t, d) is_binary
end-do

forall(i in CITIES) do
	sum(d in DAYS, j in CITIES) move(i, j, d) <= 1 + sum(d in DAYS) move(i, i ,d)
	location(i, 1) + sum(d in DAYS, j in CITIES) move(j, i, d) <= 1 + sum(d in DAYS) move(i, i ,d)
end-do

totalCost := sum(c in CITIES, d in DAYS) location(c, d) * dailyMid(c) +
             sum(f in CITIES, t in CITIES, d in DAYS) move(f, t, d) * ( travel(f, t) + 0.01 * augment(f, t, 1+d mod 7) * travel(f, t)) +
             sum(c in CITIES) (location(c, 1) * fromMelb(c) + location(c, numDays) * toMelb(c,1+numDays mod 7))

minimise(totalCost)

writeln("Total Cost: $", totalCost.sol)

forall(d in DAYS, c in CITIES) do
    if (location(c, d).sol > 0) then
        writeln("Day ", d, "(", dayNames(1+d mod 7) ,") in ", names(c))
    end-if
end-do

writeln("")
writeln("~~~~~~Cost Breakdown~~~~~~")
writeln("Melbourne Airfares: $", sum(c in CITIES) (location(c, 1).sol*fromMelb(c) + location(c, numDays).sol * toMelb(c,1+numDays mod 7)))
writeln("Europe Airfares:    $", sum(f in CITIES, t in CITIES, d in DAYS) move(f, t, d).sol * ( travel(f, t) + 0.01 * augment(f, t, 1+d mod 7) * travel(f, t)))
writeln("Daily Expenses:     $", sum(c in CITIES, d in DAYS) location(c, d).sol * dailyMid(c))


end-model