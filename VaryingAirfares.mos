model ModelName
uses "mmxprs";

declarations
    numCities = 25
    numDays = 20

    CITIES = 1..numCities
    DAYS = 1..numDays
	WEEKDAYS = 1..7

    location : array(CITIES, DAYS) of mpvar
    city : array(CITIES) of mpvar
    move : array(CITIES, CITIES, DAYS) of mpvar
	
	augment: array(CITIES, CITIES, WEEKDAYS) of integer
	augmentTemp1: array(CITIES, WEEKDAYS) of integer
	augmentTemp2: array(CITIES, WEEKDAYS) of integer
	augmentTemp3: array(CITIES, WEEKDAYS) of integer
	augmentTemp4: array(CITIES, WEEKDAYS) of integer
	augmentTemp5: array(CITIES, WEEKDAYS) of integer
	augmentTemp6: array(CITIES, WEEKDAYS) of integer
	augmentTemp7: array(CITIES, WEEKDAYS) of integer
	augmentTemp8: array(CITIES, WEEKDAYS) of integer
	augmentTemp9: array(CITIES, WEEKDAYS) of integer
	augmentTemp10: array(CITIES, WEEKDAYS) of integer
	augmentTemp11: array(CITIES, WEEKDAYS) of integer
	augmentTemp12: array(CITIES, WEEKDAYS) of integer
	augmentTemp13: array(CITIES, WEEKDAYS) of integer
	augmentTemp14: array(CITIES, WEEKDAYS) of integer
	augmentTemp15: array(CITIES, WEEKDAYS) of integer
	augmentTemp16: array(CITIES, WEEKDAYS) of integer
	augmentTemp17: array(CITIES, WEEKDAYS) of integer
	augmentTemp18: array(CITIES, WEEKDAYS) of integer
	augmentTemp19: array(CITIES, WEEKDAYS) of integer
	augmentTemp20: array(CITIES, WEEKDAYS) of integer
	augmentTemp21: array(CITIES, WEEKDAYS) of integer
	augmentTemp22: array(CITIES, WEEKDAYS) of integer
	augmentTemp23: array(CITIES, WEEKDAYS) of integer
	augmentTemp24: array(CITIES, WEEKDAYS) of integer
	augmentTemp25: array(CITIES, WEEKDAYS) of integer
	
    names: array(CITIES) of string  
    travel : array(CITIES, CITIES) of integer
    daily : array(CITIES) of integer

    minDays : integer
    maxDays : integer

    totalCost : linctr
end-declarations

names:: (1..numCities)["Moscow","Paris","London","Madrid","Rome","Crete","Barcelona","Berlin","Budapest","Florence","Amsterdam","Prague","Istanbul","Vienna","Venice","Goreme","Lisbon","Nice","Reykjavik","Edinburgh","Dublin","Krakow","Copenhagen","Athens","Munich"]

initialisations from "AirfareAugmentationData25.txt"
 	augmentTemp1 as "Moscow"
 	augmentTemp2 as "Paris"
 	augmentTemp3 as "London"
 	augmentTemp4 as "Madrid"
 	augmentTemp5 as "Rome"
 	augmentTemp6 as "Crete"
 	augmentTemp7 as "Barcelona"
 	augmentTemp8 as "Berlin"
 	augmentTemp9 as "Budapest"
 	augmentTemp10 as "Florence"
 	augmentTemp11 as "Amsterdam"
 	augmentTemp12 as "Prague"
 	augmentTemp13 as "Istanbul"
 	augmentTemp14 as "Vienna"
 	augmentTemp15 as "Venice"
 	augmentTemp16 as "Goreme"
 	augmentTemp17 as "Lisbon"
 	augmentTemp18 as "Nice"
 	augmentTemp19 as "Reykjavik"
 	augmentTemp20 as "Edinburgh"
 	augmentTemp21 as "Dublin"
 	augmentTemp22 as "Krakow"
 	augmentTemp23 as "Copenhagen"
 	augmentTemp24 as "Athens"
 	augmentTemp25 as "Munich"
end-initialisations

forall(j in CITIES) do
	forall (d in WEEKDAYS) do
		augment(1, j, d) := augmentTemp1(j, d)
		augment(2, j, d) := augmentTemp2(j, d)
		augment(3, j, d) := augmentTemp3(j, d)
		augment(4, j, d) := augmentTemp4(j, d)
		augment(5, j, d) := augmentTemp5(j, d)
		augment(6, j, d) := augmentTemp6(j, d)
		augment(7, j, d) := augmentTemp7(j, d)
		augment(8, j, d) := augmentTemp8(j, d)
		augment(9, j, d) := augmentTemp9(j, d)
		augment(10, j, d) := augmentTemp10(j, d)
		augment(11, j, d) := augmentTemp11(j, d)
		augment(12, j, d) := augmentTemp12(j, d)
		augment(13, j, d) := augmentTemp13(j, d)
		augment(14, j, d) := augmentTemp14(j, d)
		augment(15, j, d) := augmentTemp15(j, d)
		augment(16, j, d) := augmentTemp16(j, d)
		augment(17, j, d) := augmentTemp17(j, d)
		augment(18, j, d) := augmentTemp18(j, d)
		augment(19, j, d) := augmentTemp19(j, d)
		augment(20, j, d) := augmentTemp20(j, d)
		augment(21, j, d) := augmentTemp21(j, d)
		augment(22, j, d) := augmentTemp22(j, d)
		augment(23, j, d) := augmentTemp23(j, d)
		augment(24, j, d) := augmentTemp24(j, d)
		augment(25, j, d) := augmentTemp25(j, d)
	end-do
end-do

initialisations from "AirfareData25.txt"
 	travel as "travel"
end-initialisations

daily :: [10, 10, 20, 30, 5, 10, 15, 20, 35, 5, 10, 15, 25, 5, 5, 10, 15, 0, 20, 15, 5, 30, 25, 20, 15]

minDays := 2
maxDays := 3

forall(c in CITIES) do
    sum (d in DAYS) location(c, d) >= minDays * city(c)
    sum (d in DAYS) location(c, d) <= maxDays * city(c)
end-do

forall(d in 1..(numDays-1), f in CITIES, t in CITIES) do
    location(f, d) + location(t, d+1) <= 1 + move(f, t, d)
end-do

forall(d in DAYS) do
    sum (c in CITIES) location(c, d) = 1
    sum (f in CITIES, t in CITIES) move(f, t, d) = 1
end-do

forall(c in CITIES, d in DAYS) do
    city(c) is_binary
    location(c, d) is_binary
end-do

forall(f in CITIES, t in CITIES, d in DAYS) do
    move(f, t, d) is_binary
end-do

totalCost := sum(c in CITIES, d in DAYS) location(c, d) * daily(c) +
             sum(f in CITIES, t in CITIES, d in DAYS) move(f, t, d) * ( travel(f, t) + 0.01 * augment(f, t, 1+d mod 7 ) * travel(f, t)) 
             
minimise(totalCost)

writeln("Begin running model")
setparam("realfmt","%1.2f")

writeln("Total Cost: $", totalCost.sol)

forall(d in DAYS, c in CITIES) do
    if (location(c, d).sol > 0) then
        writeln("Day ", d, " in ", names(c))
    end-if
end-do

writeln("End running model")

end-model