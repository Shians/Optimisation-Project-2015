model ModelName
uses "mmxprs";
uses "mmsystem";
setparam("REALFMT", "%.3f")

declarations
	numCities = 15
    numDays = 15

	CITIES = 1..numCities
    DAYS = 1..numDays
    WEEKDAYS = 1..8
	
	location : array(CITIES, DAYS) of mpvar
	city : array(CITIES) of mpvar
	move : array(CITIES, CITIES, DAYS) of mpvar
	daysStay : array(CITIES, DAYS) of mpvar
	
	names: array(CITIES) of string 
	dayNames : array(WEEKDAYS) of string
	travel : array(CITIES, CITIES) of integer
	fromMelb : array(CITIES) of integer
    toMelb : array(CITIES) of integer
	
	baseUtility: array(CITIES) of real
	utility: array(CITIES, DAYS) of integer

	dailyLow : array(CITIES) of integer
    dailyMid : array(CITIES) of integer
    dailyHigh : array(CITIES) of integer
	
 	minDays : integer
 	maxDays : integer
 	
 	totalUtility: linctr
 	totalCost : linctr
 	
 	tstart: real
 	tstop: real
end-declarations

function findUtility(city:integer, day:integer):integer
	!returned := baseUtility(city) * (-0.2*day^2 + 0.8 * day + 0.4) !Alternative utility function
	returned := round(baseUtility(city) * 0.9^(day-1))
end-function

initialisations from "BaseData15.txt"
	names as "names"
	dayNames as "dayNames"
 	travel as "travel"
 	toMelb as "toMelb"
 	fromMelb as "fromMelb"
 	dailyLow as "dailyLow"
 	dailyMid as "dailyMid"
 	dailyHigh as "dailyHigh"
 	baseUtility as "baseUtility"
end-initialisations

minDays := 2

forall(c in CITIES) do
	utility(c,1) := round(baseUtility(c))
end-do

forall(c in CITIES, d in 2..numDays) do
	utility(c,d) := utility(c,d-1) + findUtility(c,d)
end-do


forall(c in CITIES) do
	sum (d in DAYS) location(c, d) >= minDays * city(c)
    sum (d in DAYS) daysStay(c, d) = city(c) ! Only one stay duration is valid for each city, only if city is ever visited.
end-do

forall(d in 1..(numDays-1), f in CITIES, t in CITIES) do
    location(f, d) + location(t, d+1) <= 1 + move(f, t, d)
end-do

forall(d in DAYS) do
    sum (c in CITIES) location(c, d) = 1
    sum (f in CITIES, t in CITIES) move(f, t, d) = 1
end-do

forall(c in CITIES, d in DAYS) do
    city(c) is_binary
    location(c, d) is_binary
    daysStay(c, d) is_binary
end-do

forall(f in CITIES, t in CITIES, d in DAYS) do
    move(f, t, d) is_binary
end-do

forall(c in CITIES, d in DAYS) do
	daysStay(c, d) * d <= sum(d2 in DAYS) location(c, d2) !daysStay(c,d) is one if staying d days in city c
end-do

forall(i in CITIES) do
	sum(d in DAYS, j in CITIES) move(i,j,d) <= 1 + sum(d in DAYS) move(i,i,d)
	location(i, 1) + sum(d in DAYS, j in CITIES) move(j,i,d) <= 1 + sum(d in DAYS) move(i,i,d)
end-do

totalCost := sum(c in CITIES, d in DAYS) location(c, d) * dailyMid(c) +
             sum(f in CITIES, t in CITIES, d in DAYS) move(f, t, d) * travel(f, t) +
             sum(c in CITIES) (location(c, 1) * fromMelb(c) + location(c, numDays) * toMelb(c))

totalUtility := sum(c in CITIES, d in DAYS) daysStay(c, d) * utility(c, d)

totalUtility >= 1146 ! 14 Day Solution

!totalUtility >= 945
!totalUtility <= 804 + 400 ! Increase running time a lot
!totalCost <= 5000
totalCost >= 4897 ! 14 Day Solution
!totalCost <= 3500
writeln("Begin running model")

tstart := gettime
maximise(totalUtility)
tstop := gettime

writeln("Utility Maximised")
writeln("Time: ", tstop-tstart, "s")

totalUtility >= round(0.95*totalUtility.sol)
!totalUtility = totalUtility.sol
!totalUtility >= 0.90 * totalUtility.sol
totalCost <= totalCost.sol
forall(c in CITIES, d in DAYS) do
	daysStay(c,d) = daysStay(c,d)
end-do

forall(c in CITIES) do
	sum(d in DAYS) location(c,d) = sum(d in DAYS) location(c,d).sol
end-do

minimise(totalCost)

writeln("Total Cost: $", totalCost.sol)
writeln("Total Utility: ", totalUtility.sol)

forall(d in DAYS, c in CITIES) do
    if (location(c, d).sol > 0.5) then
        writeln("Day ", d, " in City ", names(c))
    end-if
end-do

! Commented out code for 
!writeln("Total utility is ", totalUtility.sol)
!forall(c in CITIES) do
!	write(baseUtility(c),"\t")
!end-do
!writeln
!forall(c in CITIES) do
!	forall(d in DAYS) do
!		write(utility(c,d), "\t")
!	end-do
!	write("\n")
!end-do
writeln("End running model")

end-model