model ModelName
uses "mmxprs";

declarations
    numCities = 25
    numDays = 10

    CITIES = 1..numCities
    DAYS = 1..numDays
	WEEKDAYS = 1..7

    location : array(CITIES, DAYS) of mpvar
    city : array(CITIES) of mpvar
    move : array(CITIES, CITIES, DAYS) of mpvar

    names: array(CITIES) of string  
    dayNames: array(WEEKDAYS) of string
    
    travel : array(CITIES, CITIES) of integer
    return : array(CITIES) of integer
    
    dailyLow : array(CITIES) of integer
    dailyMid : array(CITIES) of integer
    dailyHigh : array(CITIES) of integer

    minDays : integer
    maxDays : integer

    totalCost : linctr
end-declarations

initialisations from "BaseData.txt"
	names as "names"
	dayNames as "dayNames"
 	travel as "travel"
 	return as "return"
 	dailyLow as "dailyLow"
 	dailyMid as "dailyMid"
 	dailyHigh as "dailyHigh"
    baseUtility as "baseUtility"
end-initialisations

minDays := 2
maxDays := 3

forall(c in CITIES) do
    sum (d in DAYS) location(c, d) >= minDays * city(c)
    sum (d in DAYS) location(c, d) <= maxDays * city(c)
end-do

forall(d in 1..(numDays-1), f in CITIES, t in CITIES) do
    location(f, d) + location(t, d+1) <= 1 + move(f, t, d)
end-do

forall(d in DAYS) do
    sum (c in CITIES) location(c, d) = 1
    sum (f in CITIES, t in CITIES) move(f, t, d) = 1
end-do

forall(c in CITIES, d in DAYS) do
    city(c) is_binary
    location(c, d) is_binary
end-do

forall(f in CITIES, t in CITIES, d in DAYS) do
    move(f, t, d) is_binary
end-do

forall(i in CITIES) do
	sum(d in 1..(numDays), j in CITIES) move(i, j, d) <= 1 + sum(d in DAYS) move(i, i ,d)
	sum(d in 1..(numDays), j in CITIES) move(j, i, d) <= 1 + sum(d in DAYS) move(i, i ,d)
end-do

forall(c in CITIES) do
	location(c, 1) = location(c, numDays)
end-do

totalCost := sum(c in CITIES, d in DAYS) location(c, d) * dailyMid(c) +
             sum(f in CITIES, t in CITIES, d in DAYS) move(f, t, d) * travel(f, t) +
             sum(c in CITIES) location(c, numDays) * return(c)

minimise(totalCost)

writeln("Begin running model")

writeln("Total Cost: $", totalCost.sol)

forall(d in DAYS, c in CITIES) do
    if (location(c, d).sol > 0.1) then
        writeln("Day ", d, "(", dayNames(1+d mod 7) ,") in ", names(c))
    end-if
end-do

writeln("")
writeln("Cost Breakdown:")
writeln("Melbourne Airfares = $", sum(c in CITIES) location(c, numDays).sol * return(c))
writeln("   Europe Airfares = $", sum(f in CITIES, t in CITIES, d in DAYS) move(f, t, d).sol * travel(f, t))
writeln("    Daily Expenses = $", sum(c in CITIES, d in DAYS) location(c, d).sol * dailyMid(c))

writeln("End running model")

end-model