model ModelName
uses "mmxprs";

declarations
    numCities = 25
    numDays = 20

    CITIES = 1..numCities
    DAYS = 1..numDays
	WEEKDAYS = 1..7

    location : array(CITIES, DAYS) of mpvar
    city : array(CITIES) of mpvar
    move : array(CITIES, CITIES, DAYS) of mpvar

    names: array(CITIES) of string  
    dayNames: array(WEEKDAYS) of string
    travel : array(CITIES, CITIES) of integer
    dailyLow : array(CITIES) of integer
    dailyMid : array(CITIES) of integer
    dailyHigh : array(CITIES) of integer

    minDays : integer
    maxDays : integer

    totalCost : linctr
end-declarations

names:: (1..numCities)["Moscow","Paris","London","Madrid","Rome","Crete","Barcelona","Berlin","Budapest","Florence","Amsterdam","Prague","Istanbul","Vienna","Venice","Goreme","Lisbon","Nice","Reykjavik","Edinburgh","Dublin","Krakow","Copenhagen","Athens","Munich"]
dayNames :: (1..7)["Sat","Sun","Mon","Tue","Wed","Thu","Fri"]

initialisations from "AirfareData25.txt"
 	travel as "travel"
end-initialisations

dailyLow :: [36, 81, 110, 57, 68, 69, 49, 50, 75, 56, 68, 39, 32, 56, 54, 46, 51, 56, 75, 63, 56, 28, 59, 41, 67]
dailyMid :: [92, 223, 298, 148, 169, 181, 126, 130, 145, 142, 165, 100, 85, 158, 134, 117, 125, 125, 207, 156, 127, 70, 147, 103, 133]
dailyHigh :: [233, 657, 845, 393, 423, 418, 321, 340, 354, 356, 432, 251, 244, 494, 325, 281, 293, 251, 634, 394, 294, 162, 365, 247, 253]

minDays := 2
maxDays := 3

forall(c in CITIES) do
    sum (d in DAYS) location(c, d) >= minDays * city(c)
    sum (d in DAYS) location(c, d) <= maxDays * city(c)
end-do

forall(d in 1..(numDays-1), f in CITIES, t in CITIES) do
    location(f, d) + location(t, d+1) <= 1 + move(f, t, d)
end-do

forall(d in DAYS) do
    sum (c in CITIES) location(c, d) = 1
    sum (f in CITIES, t in CITIES) move(f, t, d) = 1
end-do

forall(c in CITIES, d in DAYS) do
    city(c) is_binary
    location(c, d) is_binary
end-do

forall(f in CITIES, t in CITIES, d in DAYS) do
    move(f, t, d) is_binary
end-do

totalCost := sum(c in CITIES, d in DAYS) location(c, d) * dailyLow(c) +
             sum(f in CITIES, t in CITIES, d in DAYS) move(f, t, d) * travel(f, t)

minimise(totalCost)

writeln("Begin running model")

writeln("Total Cost: $", totalCost.sol)

forall(d in DAYS, c in CITIES) do
    if (location(c, d).sol > 0) then
        writeln("Day ", d, "(", dayNames(1+d mod 7) ,") in ", names(c))
    end-if
end-do

writeln("End running model")

end-model