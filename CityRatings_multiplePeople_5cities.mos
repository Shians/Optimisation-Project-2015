model ModelName
uses "mmxprs";

!User Input
declarations
	numPeople: integer
end-declarations

initializations from 'userInput_multiplePeople_5cities.txt'
	numPeople as "numPeople"
end-initializations

declarations
	numCriteria = 8
	
	CRITERIA = 1..numCriteria
	PEOPLE = 1..numPeople
	
    criteriaRating: array(PEOPLE, CRITERIA) of integer
    personRating: array(PEOPLE, PEOPLE) of integer
    budget: integer
    !budget: array(PEOPLE) of integer
    numDays: integer
end-declarations

initializations from 'userInput_multiplePeople_5cities.txt'
	criteriaRating as "criteriaRating"
	personRating as "personRating"
	budget as "budget"
	numDays as "days"
end-initializations

!Other data
declarations
    numCities = 5

    CITIES = 1..numCities
    DAYS = 1..numDays
   
    location : array(PEOPLE, CITIES, DAYS) of mpvar
    city : array(PEOPLE, CITIES) of mpvar						!Binary: 1 if Person p is every in City c
    move : array(PEOPLE, CITIES, CITIES, DAYS) of mpvar
    together : array(PEOPLE, PEOPLE, CITIES, DAYS) of mpvar		!Binary: 1 if p1 and p1 are both in City c in Day d
   
	totalCost: mpvar
	
    names: array(CITIES) of string  
    travel : array(CITIES, CITIES) of integer
    daily : array(CITIES) of integer
	costIndex : integer
	
    minDays : integer
    maxDays : integer
    
    cityRating: array(CITIES, CRITERIA) of integer
    criteria: array(CRITERIA) of string
end-declarations
names:: (1..5)["Moscow","Paris","London","Madrid","Rome"]

travel ::  [0, 146, 126, 202, 146,
		   227, 0, 60, 143, 93,
		   213, 82, 0, 249, 160,
		   188, 86, 136, 0, 144,
		   223, 80, 125, 146, 0]

daily :: [7, 15, 20, 12, 12]
costIndex := 1

forall(c in CITIES) do
	daily(c) := costIndex * daily(c)
end-do


minDays := 2
maxDays := 4

initializations from 'cityRatings_5cities.txt'
	cityRating as "cityRating"
	criteria as "criteria"
end-initializations

forall(p in PEOPLE, c in CITIES) do
    sum (d in DAYS) location(p, c, d) >= minDays * city(p, c)
	sum (d in DAYS) location(p, c, d) <= maxDays * city(p, c)
end-do

!Force move to be 1
forall(p in PEOPLE, d in 1..(numDays-1), f in CITIES, t in CITIES) do
    location(p, f, d) + location(p, t, d+1) <= 1 + move(p, f, t, d)
end-do

!Every person must be in one city every day. Every person must move every day (including between the same city).
forall(p in PEOPLE, d in DAYS) do
    sum (c in CITIES) location(p, c, d) = 1
    sum (f in CITIES, t in CITIES) move(p, f, t, d) = 1
end-do


!If p1 and p2 both in the City c on day D, force together to be 1. Otherwise force it to be 0.
forall(p1 in PEOPLE, p2 in PEOPLE, c in CITIES, d in DAYS) do
	location(p1, c, d) + location(p2, c, d) <= 1 + together(p1, p2, c, d)
	2 * together(p1, p2, c, d) <= location(p1, c, d) + location(p2, c, d)
end-do


!There must never be a person alone.
forall(p1 in PEOPLE, d in DAYS, c in CITIES) do
	sum(p2 in PEOPLE) together(p1, p2, c, d) >= 2 * location(p1, c, d)
end-do


forall(p in PEOPLE, c in CITIES, d in DAYS) do
    city(p, c) is_binary
    location(p, c, d) is_binary
end-do

forall(p in PEOPLE, f in CITIES, t in CITIES, d in DAYS) do
    move(p, f, t, d) is_binary
end-do

forall(p1 in PEOPLE, p2 in PEOPLE, c in CITIES, d in DAYS) do
	together(p1, p2, c, d) is_binary
end-do

!TOTAL BUDGET
totalCost = sum(p in PEOPLE, c in CITIES, d in DAYS) location(p, c, d) * daily(c) + sum(p in PEOPLE, f in CITIES, t in CITIES, d in 1..numDays-1) move(p, f, t, d) * travel(f, t)
totalCost <= budget * 5
(!
!INDIVIDUAL BUDGET
forall (p in PEOPLE) do
	totalCost = sum(c in CITIES, d in DAYS) location(p, c, d) * daily(c) + sum(f in CITIES, t in CITIES, d in 1..numDays-1) move(p, f, t, d) * travel(f, t)
	totalCost <= 10 * budget(p)
end-do
!)

!enjoyment :=  sum(p in PEOPLE, c in CITIES, d in DAYS, i in CRITERIA) (location(p, c, d) * cityRating(c, i) * criteriaRating(p, i))
enjoyment :=  sum(p in PEOPLE, c in CITIES, d in DAYS, i in CRITERIA) (location(p, c, d) * cityRating(c, i) * criteriaRating(p, i)) + sum(p1 in PEOPLE, p2 in PEOPLE, c in CITIES, d in DAYS) personRating(p1, p2) * together(p1, p2, c, d)

maximize(enjoyment)

writeln("Begin running model")


writeln("Total Cost: $", totalCost.sol)
writeln("Total Enjoyment: ", getobjval)

forall(p in PEOPLE) do
	writeln("Person ", p)
	writeln("Enjoyment: ", sum(c in CITIES, d in DAYS, i in CRITERIA) location(p, c, d).sol * cityRating(c, i) * criteriaRating(p, i))
	writeln("Individual cost: $", sum(c in CITIES, d in DAYS) location(p, c, d).sol * daily(c) + sum(f in CITIES, t in CITIES, d in 1..numDays-1) move(p, f, t, d).sol * travel(f, t))
	forall(d in DAYS, c in CITIES) do
    	if (location(p, c, d).sol > 0) then
        	writeln("Day ", d, " in ", names(c))
    	end-if
	end-do
end-do

(!
!Now minimise cost, given enjoyment value
sum(p in PEOPLE, c in CITIES, d in DAYS, i in CRITERIA) (location(p, c, d) * cityRating(c, i) * criteriaRating(p, i)) = enjoyment.sol

minimize(totalCost)

writeln("Total Cost: $", totalCost.sol)

forall(p in PEOPLE, d in DAYS, c in CITIES) do
    if (location(p, c, d).sol > 0) then
        writeln("Day ", d, " in ", names(c))
    end-if
end-do
!)

writeln("End running model")

end-model