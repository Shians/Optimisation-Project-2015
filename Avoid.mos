model ModelName
uses "mmxprs";
setparam("REALFMT", "%.2f")

declarations
    numCities = 15
    numDays = 10
    numPeople = 2

    CITIES = 1..numCities
    DAYS = 1..numDays
	PEOPLE = 1..numPeople

    location : array(CITIES, DAYS, PEOPLE) of mpvar
    city : array(CITIES, PEOPLE) of mpvar
    move : array(CITIES, CITIES, DAYS, PEOPLE) of mpvar
    
    partner : array(CITIES, DAYS) of real
    together : array(CITIES, DAYS) of mpvar
    daysTogether : linctr

    names: array(CITIES) of string 
    
    travel : array(CITIES, CITIES) of integer
    fromMelb : array(CITIES) of integer
    toMelb : array(CITIES) of integer
    
    baseUtility : array(CITIES) of real
    dailyMid : array(CITIES) of integer
    budget : array(PEOPLE) of integer

    minDays : integer
    maxDays : integer
    
    epsilon : real
    
    totalUtility : array(PEOPLE) of linctr
    totalCost : array(PEOPLE) of linctr
end-declarations

initialisations from "BaseData15.txt"
	names as "names"
 	travel as "travel"
 	toMelb as "toMelb"
 	fromMelb as "fromMelb"
 	baseUtility as "baseUtility"
 	dailyMid as "dailyMid"
end-initialisations

minDays := 2
maxDays := 4

budget :: [4200, 4200]

epsilon := 0.005

forall(c in CITIES, p in PEOPLE) do
    sum (d in DAYS) location(c, d, p) >= minDays * city(c, p)
    sum (d in DAYS) location(c, d, p) <= maxDays * city(c, p)
end-do

forall(d in DAYS - {numDays}, f in CITIES, t in CITIES, p in PEOPLE) do
    location(f, d, p) + location(t, d+1, p) <= 1 + move(f, t, d, p)
end-do

forall(d in DAYS, p in PEOPLE) do
    sum (c in CITIES) location(c, d, p) = 1
    sum (f in CITIES, t in CITIES) move(f, t, d, p) = 1
end-do

forall(c in CITIES, d in DAYS, p in PEOPLE) do
    location(c, d, p) is_binary
end-do

forall(f in CITIES, t in CITIES, d in DAYS, p in PEOPLE) do
    move(f, t, d, p) is_binary
end-do

forall(c in CITIES, p in PEOPLE) do
	city(c, p) is_binary
end-do

forall(i in CITIES, p in PEOPLE) do
	sum(d in DAYS, j in CITIES) move(i, j, d, p) <= 1 + sum(d in DAYS) move(i, i, d, p)
	location(i, 1, p) + sum(d in DAYS, j in CITIES) move(j, i, d, p) <= 1 + sum(d in DAYS) move(i, i, d, p)
end-do

forall(p in PEOPLE) do
	totalUtility(p) := sum(c in CITIES, d in DAYS) location(c, d, p) * baseUtility(c)
	
	totalCost(p) := sum(c in CITIES, d in DAYS) location(c, d, p) * dailyMid(c) +
    	         	sum(f in CITIES, t in CITIES, d in DAYS) move(f, t, d, p) * travel(f, t) +
        	     	sum(c in CITIES) (location(c, 1, p) * fromMelb(c) + location(c, numDays, p) * toMelb(c))
        	     	
	totalCost(p) <= budget(p)
end-do

writeln("Person 1\n")

writeln("Maximising Utility for Person 1 ...")

maximise(totalUtility(1))

writeln("Max Utility : ", totalUtility(1).sol)

totalUtility(1) >= totalUtility(1).sol * (1 - epsilon)
totalCost(1) <= totalCost(1).sol

writeln("\nMimimising Cost for Person 1 ...")

minimise(totalCost(1))

writeln("Total Cost    : $", totalCost(1).sol)
writeln("Total Utility :  ", totalUtility(1).sol)

writeln("")

forall(d in DAYS, c in CITIES) do
    if (location(c, d, 1).sol = 1) then
        writeln("Day ", d," in ", names(c))
    end-if
end-do

writeln("")
writeln("~~~~~~~~Cost Breakdown~~~~~~~~")
writeln("Melbourne Airfares : $", sum(c in CITIES) (location(c, 1, 1).sol * fromMelb(c) + location(c, numDays, 1).sol * toMelb(c)))
writeln("Europe Airfares    : $", sum(f in CITIES, t in CITIES, d in DAYS) move(f, t, d, 1).sol * travel(f, t))
writeln("Daily Expenses     : $", sum(c in CITIES, d in DAYS) location(c, d, 1).sol * dailyMid(c))

forall(c in CITIES, d in DAYS) do
	partner(c, d) := location(c, d, 1).sol
end-do

forall(c in CITIES, d in DAYS) do
	location(c, d, 2) + partner(c, d) <= 1 + together(c, d)
end-do

forall(c in CITIES, d in DAYS) do
	together(c, d) is_binary
end-do

daysTogether := sum(c in CITIES, d in DAYS) together(c, d)

writeln("\nPerson 2\n")

writeln("Minimising days together ...")

minimise(daysTogether)

writeln("Together : ", daysTogether.sol, " days\n")

daysTogether = daysTogether.sol
totalUtility(2) >= totalUtility(2).sol

writeln("Maximising Utility for Person 2 ...")

maximise(totalUtility(2))

writeln("Max Utility : ", totalUtility(2).sol)

totalUtility(2) >= totalUtility(2).sol * (1 - epsilon)
totalCost(2) <= totalCost(2).sol

writeln("\nMinimising Cost for Person 2 ...")

minimise(totalCost(2))

writeln("Total Cost    : $", totalCost(2).sol)
writeln("Total Utility :  ", totalUtility(2).sol)

writeln("")

forall(d in DAYS, c in CITIES) do
    if (location(c, d, 2).sol = 1) then
        writeln("Day ", d," in ", names(c))
    end-if
end-do

writeln("")
writeln("~~~~~~~~Cost Breakdown~~~~~~~~")
writeln("Melbourne Airfares : $", sum(c in CITIES) (location(c, 1, 2).sol * fromMelb(c) + location(c, numDays, 2).sol * toMelb(c)))
writeln("Europe Airfares    : $", sum(f in CITIES, t in CITIES, d in DAYS) move(f, t, d, 2).sol * travel(f, t))
writeln("Daily Expenses     : $", sum(c in CITIES, d in DAYS) location(c, d, 2).sol * dailyMid(c))

end-model
